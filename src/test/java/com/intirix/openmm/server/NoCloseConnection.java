package com.intirix.openmm.server;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class NoCloseConnection implements Connection
{
	
	private final Connection child;
	
	public NoCloseConnection( Connection child )
	{
		this.child = child;
	}

	public boolean isWrapperFor( Class< ? > iface ) throws SQLException
	{
		return child.isWrapperFor( iface );
	}

	public < T > T unwrap( Class< T > iface ) throws SQLException
	{
		return child.unwrap( iface );
	}

	public void clearWarnings() throws SQLException
	{
		child.clearWarnings();
	}

	public void close() throws SQLException
	{
		// Ignore
	}

	public void commit() throws SQLException
	{
		child.commit();
	}

	public Array createArrayOf( String typeName, Object[] elements ) throws SQLException
	{
		return child.createArrayOf( typeName, elements );
	}

	public Blob createBlob() throws SQLException
	{
		return child.createBlob();
	}

	public Clob createClob() throws SQLException
	{
		return child.createClob();
	}

	public NClob createNClob() throws SQLException
	{
		return child.createNClob();
	}

	public SQLXML createSQLXML() throws SQLException
	{
		return child.createSQLXML();
	}

	public Statement createStatement() throws SQLException
	{
		return child.createStatement();
	}

	public Statement createStatement( int resultSetType, int resultSetConcurrency ) throws SQLException
	{
		return child.createStatement( resultSetType, resultSetConcurrency );
	}

	public Statement createStatement( int resultSetType, int resultSetConcurrency, int resultSetHoldability )
			throws SQLException
	{
		return child.createStatement( resultSetType, resultSetConcurrency, resultSetHoldability );
	}

	public Struct createStruct( String typeName, Object[] attributes ) throws SQLException
	{
		return createStruct( typeName, attributes );
	}

	public boolean getAutoCommit() throws SQLException
	{
		return child.getAutoCommit();
	}

	public String getCatalog() throws SQLException
	{
		return child.getCatalog();
	}

	public Properties getClientInfo() throws SQLException
	{
		return child.getClientInfo();
	}

	public String getClientInfo( String name ) throws SQLException
	{
		return child.getClientInfo( name );
	}

	public int getHoldability() throws SQLException
	{
		return child.getHoldability();
	}

	public DatabaseMetaData getMetaData() throws SQLException
	{
		return child.getMetaData();
	}



	public int getTransactionIsolation() throws SQLException
	{
		return child.getTransactionIsolation();
	}

	public Map< String, Class< ? >> getTypeMap() throws SQLException
	{
		return child.getTypeMap();
	}

	public SQLWarning getWarnings() throws SQLException
	{
		return child.getWarnings();
	}

	public boolean isClosed() throws SQLException
	{
		return child.isClosed();
	}

	public boolean isReadOnly() throws SQLException
	{
		return child.isReadOnly();
	}

	public boolean isValid( int timeout ) throws SQLException
	{
		return child.isValid( timeout );
	}

	public String nativeSQL( String sql ) throws SQLException
	{
		return child.nativeSQL( sql );
	}

	public CallableStatement prepareCall( String sql ) throws SQLException
	{
		return child.prepareCall( sql );
	}

	public CallableStatement prepareCall( String sql, int resultSetType, int resultSetConcurrency ) throws SQLException
	{
		return child.prepareCall( sql, resultSetType, resultSetConcurrency );
	}

	public CallableStatement prepareCall( String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability ) throws SQLException
	{
		return child.prepareCall( sql, resultSetType, resultSetConcurrency, resultSetHoldability );
	}

	public PreparedStatement prepareStatement( String sql ) throws SQLException
	{
		return child.prepareStatement( sql );
	}

	public PreparedStatement prepareStatement( String sql, int autoGeneratedKeys ) throws SQLException
	{
		return child.prepareStatement( sql, autoGeneratedKeys );
	}

	public PreparedStatement prepareStatement( String sql, int[] columnIndexes ) throws SQLException
	{
		return child.prepareStatement( sql, columnIndexes );
	}

	public PreparedStatement prepareStatement( String sql, String[] columnNames ) throws SQLException
	{
		return child.prepareStatement( sql, columnNames );
	}

	public PreparedStatement prepareStatement( String sql, int resultSetType, int resultSetConcurrency )
			throws SQLException
	{
		return child.prepareStatement( sql, resultSetType, resultSetConcurrency );
	}

	public PreparedStatement prepareStatement( String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability ) throws SQLException
	{
		return child.prepareStatement( sql, resultSetType, resultSetConcurrency, resultSetHoldability );
	}

	public void releaseSavepoint( Savepoint savepoint ) throws SQLException
	{
		child.releaseSavepoint( savepoint );
	}

	public void rollback() throws SQLException
	{
		child.rollback();
	}

	public void rollback( Savepoint savepoint ) throws SQLException
	{
		child.rollback( savepoint );
	}

	public void setAutoCommit( boolean autoCommit ) throws SQLException
	{
		child.setAutoCommit( autoCommit );
	}

	public void setCatalog( String catalog ) throws SQLException
	{
		child.setCatalog( catalog );
	}

	public void setClientInfo( Properties properties ) throws SQLClientInfoException
	{
		child.setClientInfo( properties );
	}

	public void setClientInfo( String name, String value ) throws SQLClientInfoException
	{
		child.setClientInfo( name, value );
	}

	public void setHoldability( int holdability ) throws SQLException
	{
		child.setHoldability( holdability );
	}


	public void setReadOnly( boolean readOnly ) throws SQLException
	{
		child.setReadOnly( readOnly );
	}

	public Savepoint setSavepoint() throws SQLException
	{
		return child.setSavepoint();
	}

	public Savepoint setSavepoint( String name ) throws SQLException
	{
		return child.setSavepoint( name );
	}


	public void setTransactionIsolation( int level ) throws SQLException
	{
		child.setTransactionIsolation( level );
	}

	public void setTypeMap( Map< String, Class< ? >> map ) throws SQLException
	{
		child.setTypeMap( map );
	}

	public void abort( Executor executor ) throws SQLException
	{
		// TODO Auto-generated method stub
		
	}

	public int getNetworkTimeout() throws SQLException
	{
		// TODO Auto-generated method stub
		return 0;
	}

	public String getSchema() throws SQLException
	{
		// TODO Auto-generated method stub
		return null;
	}

	public void setNetworkTimeout( Executor executor, int milliseconds ) throws SQLException
	{
		// TODO Auto-generated method stub
		
	}

	public void setSchema( String schema ) throws SQLException
	{
		// TODO Auto-generated method stub
		
	}

}
