package com.intirix.openmm.server.mt.technical.beans;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;

import com.intirix.openmm.server.api.beans.Episode;
import com.intirix.openmm.server.mt.technical.sql.SQLHelper.ObjectFactory;

public class EpisodeObjectFactory implements ObjectFactory< Episode >
{
	/*
	 * CREATE CACHED TABLE OPENMM_SHOW_EPISODES (
	EPISODE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY,
	SEASON_ID INTEGER NOT NULL,
	TVDB_ID VARCHAR( 16 ),							-- optional TVDB episode id
	NAME VARCHAR( 128 ) NOT NULL,
	EPNUM INTEGER,
	DVD_EPNUM INTEGER,
	SCREENSHOT_PATH VARCHAR( 255 ),
	DESCRIPTION VARCHAR( 255 ),
	AIR_DATE VARCHAR( 16 ),
	RATING VARCHAR( 16 ),
	LAST_WATCHED DATE,
	WATCH_COUNT INTEGER DEFAULT 0 NOT NULL,
	PRIMARY KEY ( EPISODE_ID ),
	FOREIGN KEY ( SEASON_ID ) REFERENCES OPENMM_SHOW_SEASONS( SEASON_ID )
); */

	public Episode createObject( ResultSet rs ) throws SQLException
	{
		final Episode episode = new Episode();
		
		episode.setId( rs.getInt( "EPISODE_ID" ) );
		episode.setSeasonId( rs.getInt( "SEASON_ID" ) );
		episode.setTvdbId( rs.getString( "TVDB_ID" ) );
		episode.setName( rs.getString( "NAME" ) );
		episode.setEpNum( rs.getInt( "EPNUM" ) );
		episode.setDvdNum( rs.getInt( "DVD_EPNUM" ) );
		episode.setScreenshotPath( rs.getString( "SCREENSHOT_PATH" ) );
		episode.setDescription( rs.getString( "DESCRIPTION" ) );
		episode.setGuests( rs.getString( "GUESTS" ) );
		episode.setAirDate( rs.getString( "AIR_DATE" ) );
		episode.setRating( rs.getString( "RATING" ) );
		
		final Timestamp ts = rs.getTimestamp( "LAST_WATCHED" );
		if ( ts != null )
		{
			final SimpleDateFormat sdf = new SimpleDateFormat( "yyyy/MM/dd" );
			try
			{
				episode.setLastWatched( sdf.format( ts ) );
			}
			catch ( Exception e )
			{
				// ignore
			}
		}
		episode.setWatchCount( rs.getInt( "WATCH_COUNT" ) );
		
		return episode;
	}

}
